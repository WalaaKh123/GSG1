{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww30040\viewh16620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import 'dart:io';\
\
// ---------------- Stack Challenges ----------------\
\
// Challenge 1: Reverse a list using stack\
void reverseList(List<int> list) \{\
  List<int> stack = [];\
  for (var item in list) \{\
    stack.add(item);\
  \}\
  while (stack.isNotEmpty) \{\
    print(stack.removeLast());\
  \}\
\}\
\
// Challenge 2: Check for balanced parentheses\
bool isBalanced(String input) \{\
  List<String> stack = [];\
  for (var ch in input.split('')) \{\
    if (ch == '(') \{\
      stack.add(ch);\
    \} else if (ch == ')') \{\
      if (stack.isEmpty) return false;\
      stack.removeLast();\
    \}\
  \}\
  return stack.isEmpty;\
\}\
\
// ---------------- Linked List Implementation ----------------\
\
class Node<T> \{\
  T value;\
  Node<T>? next;\
  Node(this.value);\
\}\
\
class LinkedList<T> \{\
  Node<T>? head;\
\
  void append(T value) \{\
    if (head == null) \{\
      head = Node(value);\
    \} else \{\
      Node<T> current = head!;\
      while (current.next != null) \{\
        current = current.next!;\
      \}\
      current.next = Node(value);\
    \}\
  \}\
\
  void printList() \{\
    Node<T>? current = head;\
    while (current != null) \{\
      stdout.write("$\{current.value\} -> ");\
      current = current.next;\
    \}\
    print("null");\
  \}\
\
  // Challenge 1: Print in reverse\
  void printInReverse([Node<T>? node]) \{\
    node ??= head;\
    if (node == null) return;\
    if (node.next != null) printInReverse(node.next);\
    print(node.value);\
  \}\
\
  // Challenge 2: Find middle node\
  Node<T>? findMiddle() \{\
    Node<T>? slow = head;\
    Node<T>? fast = head;\
    while (fast != null && fast.next != null) \{\
      slow = slow!.next;\
      fast = fast.next!.next;\
    \}\
    return slow;\
  \}\
\
  // Challenge 3: Reverse the linked list\
  void reverse() \{\
    Node<T>? prev;\
    Node<T>? current = head;\
    while (current != null) \{\
      Node<T>? next = current.next;\
      current.next = prev;\
      prev = current;\
      current = next;\
    \}\
    head = prev;\
  \}\
\
  // Challenge 4: Remove all occurrences\
  void removeAll(T value) \{\
    while (head != null && head!.value == value) \{\
      head = head!.next;\
    \}\
\
    Node<T>? current = head;\
    while (current?.next != null) \{\
      if (current!.next!.value == value) \{\
        current.next = current.next!.next;\
      \} else \{\
        current = current.next;\
      \}\
    \}\
  \}\
\}\
\
// ---------------- Main Function ----------------\
\
void main() \{\
  // Stack challenge 1\
  print("\uc0\u55357 \u56550  Stack - Reverse List:");\
  reverseList([1, 2, 3, 4]);\
\
  // Stack challenge 2\
  print("\\n\uc0\u55357 \u56550  Stack - Balanced Parentheses:");\
  print(isBalanced("((hello))")); // true\
  print(isBalanced("(nope("));     // false\
\
  // Linked List setup\
  LinkedList<int> list = LinkedList<int>();\
  for (var i in [1, 2, 3, 4, 5, 3]) \{\
    list.append(i);\
  \}\
\
  // Linked list challenge 1\
  print("\\n\uc0\u55357 \u56599  LinkedList - Print in Reverse:");\
  list.printInReverse();\
\
  // Linked list challenge 2\
  print("\\n\uc0\u55357 \u56599  LinkedList - Middle Node:");\
  print(list.findMiddle()?.value);\
\
  // Linked list challenge 3\
  print("\\n\uc0\u55357 \u56599  LinkedList - Reversed List:");\
  list.reverse();\
  list.printList();\
\
  // Linked list challenge 4\
  print("\\n\uc0\u55357 \u56599  LinkedList - Remove All 3s:");\
  list.removeAll(3);\
  list.printList();\
\}\
}